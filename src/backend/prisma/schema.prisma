// @prisma/client ^4.0.0
// Database schema for LinkedIn Profiles Gallery application
// Implements secure data models with audit capabilities and privacy controls

// Database connection configuration
datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

// Prisma Client generator configuration
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

// User role enumeration for access control
enum UserRole {
  USER
  ADMIN
}

// Profile visibility control enumeration
enum ProfileVisibility {
  PUBLIC
  PRIVATE
  CONNECTIONS_ONLY
}

// Core user model with authentication and role management
model User {
  id         String    @id @default(uuid()) @db.Uuid
  email      String    @unique @db.VarChar(255)
  name       String    @db.VarChar(100)
  role       UserRole  @default(USER)
  profile    Profile?
  is_active  Boolean   @default(true)
  last_login DateTime?

  // Audit fields
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([email])
  @@index([role])
  @@map("users")
}

// Professional profile model with privacy controls
model Profile {
  id           String           @id @default(uuid()) @db.Uuid
  userId       String           @unique @db.Uuid
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  headline     String           @db.VarChar(200)
  bio          String?          @db.Text
  avatar_url   String?          @db.VarChar(500)
  experiences  Experience[]
  social_links Json?
  visibility   ProfileVisibility @default(PUBLIC)

  // Audit fields
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([userId])
  @@index([visibility])
  @@map("profiles")
}

// Professional experience tracking
model Experience {
  id          String    @id @default(uuid()) @db.Uuid
  profileId   String    @db.Uuid
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  title       String    @db.VarChar(200)
  company     String    @db.VarChar(200)
  location    String?   @db.VarChar(200)
  start_date  DateTime
  end_date    DateTime?
  description String?   @db.Text
  is_current  Boolean   @default(false)

  // Audit fields
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([profileId])
  @@index([company])
  @@index([start_date])
  @@map("experiences")
}